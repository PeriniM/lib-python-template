# Conventional-commit driven release configuration
# Upload to PyPI is NOT done here anymore â€“ handled in the "publish" job.

plugins:
  # 1. Decide the next version from commit messages
  - [ "@semantic-release/commit-analyzer",
      { preset: conventionalcommits } ]

  # 2. Generate release notes
  - [ "@semantic-release/release-notes-generator",
      {
        preset: conventionalcommits,
        writerOpts: { commitsSort: [ "subject", "scope" ] },
        presetConfig:
          { types:
              [ { type: feat,   section: Features },
                { type: fix,    section: Bug Fixes },
                { type: chore,  section: Chore },
                { type: docs,   section: Docs },
                { type: refactor, section: Refactor },
                { type: perf,   section: Perf },
                { type: test,   section: Test },
                { type: build,  section: Build },
                { type: ci,     section: CI } ] } } ]

  # 3. Update CHANGELOG.md
  - "@semantic-release/changelog"

  # 4. Create / update GitHub Release page
  - "@semantic-release/github"

  # 5. Commit files back to repo (CHANGELOG + version bump in pyproject.toml)
  - [ "@semantic-release/git",
      {
        assets: [ "CHANGELOG.md", "pyproject.toml" ],
        message: "ci(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
      } ]

# Release channels
branches:
  # maintenance (1.2.x, 2.x.x, etc.)
  - { name: "+([0-9])?(.{+([0-9]),x}).x", channel: stable }
  # stable
  - { name: "main", channel: stable }
  # prerelease
  - { name: "pre/beta", channel: dev, prerelease: beta }

debug: true
